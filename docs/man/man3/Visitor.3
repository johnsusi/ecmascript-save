.TH "Visitor" 3 "Tue May 30 2017" "ECMAScript" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Visitor
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <visitor\&.h>\fP
.PP
Inherited by \fBBasicVisitor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBThis\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBIdentifier\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBNullLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBooleanLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBNumericLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBStringLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBRegularExpressionLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBArrayLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBObjectLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBThisExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBIdentifierExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBLiteralExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBArrayExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBObjectExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBMemberExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBNewExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBCallExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBPostfixExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBUnaryExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBinaryExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBConditionalExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBAssignmentExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBFunctionExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBlock\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBVariableStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBEmptyStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBExpressionStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBIfStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBDoWhileStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBWhileStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBForStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBForInStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBContinueStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBreakStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBReturnStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBWithStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBLabelledStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBSwitchStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBThrowStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBTryStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBDebuggerStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBCaseClause\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBDefaultClause\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBFunctionDeclaration\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBFunctionBody\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBVariableDeclaration\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBElision\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBPropertyName\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBPropertyAssignment\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBArguments\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBProgram\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBElementList\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBPropertyNameAndValueList\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBArgumentList\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBVariableDeclarationList\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBStatementList\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBCaseBlock\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBSourceElements\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBFormalParameterList\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBProgramDeclaration\fP &)=0"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "virtual void Visitor::operator() (const \fBThis\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBIdentifier\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBNullLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBBooleanLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBNumericLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBStringLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBRegularExpressionLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBArrayLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBObjectLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBThisExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBIdentifierExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBLiteralExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBArrayExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBObjectExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBMemberExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBNewExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBCallExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBPostfixExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBUnaryExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBBinaryExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBConditionalExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBAssignmentExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBFunctionExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBBlock\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBVariableStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBEmptyStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBExpressionStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBIfStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBDoWhileStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBWhileStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBForStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBForInStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBContinueStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBBreakStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBReturnStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBWithStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBLabelledStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBSwitchStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBThrowStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBTryStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBDebuggerStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBCaseClause\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBDefaultClause\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBFunctionDeclaration\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBFunctionBody\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBVariableDeclaration\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBElision\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBPropertyName\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBPropertyAssignment\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBArguments\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBProgram\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBElementList\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBPropertyNameAndValueList\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBArgumentList\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBVariableDeclarationList\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBStatementList\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBCaseBlock\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBSourceElements\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBFormalParameterList\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.
.SS "virtual void Visitor::operator() (const \fBProgramDeclaration\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBBasicVisitor\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ECMAScript from the source code\&.
