.TH "src/util.h" 3 "Wed Jun 14 2017" "ECMAScript" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/util.h
.SH SYNOPSIS
.br
.PP
\fC#include <array>\fP
.br
\fC#include <string>\fP
.br
\fC#include <utility>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBstd::u16string\fP \fBconvert_utf8_to_utf16\fP (const \fBstd::string\fP &)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBconvert_utf16_to_utf8\fP (const \fBstd::u16string\fP &)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBleft_align_text\fP (const \fBstd::string\fP &text, const \fBstd::string\fP &indent='')"
.br
.ti -1c
.RI "const char * \fBu_charCategory\fP (int c)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBread_file\fP (const \fBstd::string\fP &filename)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBread_stdin\fP ()"
.br
.ti -1c
.RI "\fBstd::string\fP \fBstringify\fP (const \fBstd::u16string\fP &)"
.br
.ti -1c
.RI "template<typename T > \fBstd::string\fP \fBdemangle\fP ()"
.br
.ti -1c
.RI "template<typename T > \fBstd::string\fP \fBdemangle\fP (T)"
.br
.ti -1c
.RI "template<class F , size_t\&.\&.\&. Is> constexpr auto \fBindex_apply_impl\fP (F f, std::index_sequence< Is\&.\&.\&. >)"
.br
.ti -1c
.RI "template<size_t N, class F > constexpr auto \fBindex_apply\fP (F f)"
.br
.ti -1c
.RI "template<typename F , typename\&.\&.\&. Args> void \fBfor_each_arg\fP (F &&fun, Args &&\&.\&.\&. args)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBstd::string\fP convert_utf16_to_utf8 (const \fBstd::u16string\fP & source)"
Converts \fIsource\fP from UTF-16 to UTF-8\&. 
.SS "\fBstd::u16string\fP convert_utf8_to_utf16 (const \fBstd::string\fP & source)"
Converts \fIsource\fP from UTF-8 to UTF-16 and normalised to Unicode Normalization Form C\&.
.PP
Throws \fI\fBstd::runtime_error\fP\fP on failure\&. 
.SS "template<typename T > \fBstd::string\fP demangle ()"

.SS "template<typename T > \fBstd::string\fP demangle (T)"

.SS "template<typename F , typename\&.\&.\&. Args> void for_each_arg (F && fun, Args &&\&.\&.\&. args)"

.SS "template<size_t N, class F > constexpr auto index_apply (F f)"

.SS "template<class F , size_t\&.\&.\&. Is> constexpr auto index_apply_impl (F f, std::index_sequence< Is\&.\&.\&. >)"

.SS "\fBstd::string\fP left_align_text (const \fBstd::string\fP & text, const \fBstd::string\fP & indent)"
Left aligns \fItext\fP by first finding the left-most non-whitespace character and then removing that many leading white-space characters from each line\&. The result is then indented using the optional \fIindent\fP and joined into a string\&. 
.SS "\fBstd::string\fP read_file (const \fBstd::string\fP & filename)"

.SS "\fBstd::string\fP read_stdin ()"

.SS "\fBstd::string\fP stringify (const \fBstd::u16string\fP &)"

.SS "const char* u_charCategory (int c)"
Returns the general category (short) name for the code point\&. If the category is not known '??' is returned\&. Always returns a zero terminated char array of length 3\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for ECMAScript from the source code\&.
