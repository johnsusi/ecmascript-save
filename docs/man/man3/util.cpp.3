.TH "src/util.cpp" 3 "Sat Jun 10 2017" "ECMAScript" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/util.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'util\&.h'\fP
.br
\fC#include <algorithm>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <numeric>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <boost/algorithm/string\&.hpp>\fP
.br
\fC#include <boost/core/demangle\&.hpp>\fP
.br
\fC#include <unicode/errorcode\&.h>\fP
.br
\fC#include <unicode/normalizer2\&.h>\fP
.br
\fC#include <unicode/uchar\&.h>\fP
.br
\fC#include <unicode/unistr\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBstd::u16string\fP \fBconvert_utf8_to_utf16\fP (const \fBstd::string\fP &source)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBconvert_utf16_to_utf8\fP (const \fBstd::u16string\fP &source)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBleft_align_text\fP (const \fBstd::string\fP &text, const \fBstd::string\fP &indent)"
.br
.ti -1c
.RI "const char * \fBu_charCategory\fP (int c)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBread_file\fP (const \fBstd::string\fP &filename)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBread_stdin\fP ()"
.br
.ti -1c
.RI "static char \fBto_hex_digit\fP (int x)"
.br
.ti -1c
.RI "static \fBstd::string\fP & \fBencode\fP (\fBstd::string\fP &str, int cp)"
.br
.ti -1c
.RI "\fBstd::string\fP \fBstringify\fP (const \fBstd::u16string\fP &str)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBstd::string\fP convert_utf16_to_utf8 (const \fBstd::u16string\fP & source)"
Converts \fIsource\fP from UTF-16 to UTF-8\&. 
.SS "\fBstd::u16string\fP convert_utf8_to_utf16 (const \fBstd::string\fP & source)"
Converts \fIsource\fP from UTF-8 to UTF-16 and normalised to Unicode Normalization Form C\&.
.PP
Throws \fI\fBstd::runtime_error\fP\fP on failure\&. 
.SS "static \fBstd::string\fP& encode (\fBstd::string\fP & str, int cp)\fC [static]\fP"

.SS "\fBstd::string\fP left_align_text (const \fBstd::string\fP & text, const \fBstd::string\fP & indent)"
Left aligns \fItext\fP by first finding the left-most non-whitespace character and then removing that many leading white-space characters from each line\&. The result is then indented using the optional \fIindent\fP and joined into a string\&. 
.SS "\fBstd::string\fP read_file (const \fBstd::string\fP & filename)"

.SS "\fBstd::string\fP read_stdin ()"

.SS "\fBstd::string\fP stringify (const \fBstd::u16string\fP & str)"

.SS "static char to_hex_digit (int x)\fC [static]\fP"

.SS "const char* u_charCategory (int c)"
Returns the general category (short) name for the code point\&. If the category is not known '??' is returned\&. Always returns a zero terminated char array of length 3\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for ECMAScript from the source code\&.
