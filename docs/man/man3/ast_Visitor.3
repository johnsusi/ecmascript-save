.TH "ast::Visitor" 3 "Sun Apr 30 2017" "ECMAScript" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ast::Visitor
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ast\&.h>\fP
.PP
Inherited by \fBCallableVisitor< Callable >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename T > void \fBoperator()\fP (const \fBList\fP< T > &list)"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBThis\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBIdentifier\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBNullLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBooleanLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBNumericLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBStringLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBRegularExpressionLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBArrayLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBObjectLiteral\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBMemberExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBNewExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBCallExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBPostfixExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBUnaryExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBinaryExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBConditionalExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBFunctionExpression\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBlock\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBVariableStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBEmptyStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBExpressionStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBIfStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBDoWhileStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBWhileStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBForStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBForInStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBContinueStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBBreakStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBReturnStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBWithStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBLabelledStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBSwitchStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBThrowStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBTryStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBDebuggerStatement\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBCaseClause\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBDefaultClause\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBFunctionDeclaration\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBVariableDeclaration\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBElision\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBPropertyName\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBPropertyAssignment\fP &)=0"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBArguments\fP &)=0"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > void ast::Visitor::operator() (const \fBList\fP< T > & list)\fC [inline]\fP"

.SS "virtual void ast::Visitor::operator() (const \fBThis\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBIdentifier\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBNullLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBBooleanLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBNumericLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBStringLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBRegularExpressionLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBArrayLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBObjectLiteral\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBMemberExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBNewExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBCallExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBPostfixExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBUnaryExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBBinaryExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBConditionalExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBFunctionExpression\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBBlock\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBVariableStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBEmptyStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBExpressionStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBIfStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBDoWhileStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBWhileStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBForStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBForInStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBContinueStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBBreakStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBReturnStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBWithStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBLabelledStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBSwitchStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBThrowStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBTryStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBDebuggerStatement\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBCaseClause\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBDefaultClause\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBFunctionDeclaration\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBVariableDeclaration\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBElision\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBPropertyName\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBPropertyAssignment\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.
.SS "virtual void ast::Visitor::operator() (const \fBArguments\fP &)\fC [pure virtual]\fP"

.PP
Implemented in \fBCallableVisitor< Callable >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ECMAScript from the source code\&.
